name: Build

on:
  push:
    branches:
      - '**'
  release:
    types: [ created ]

jobs:
  macos:
    runs-on: macos-11.0
    steps:
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '12.4'
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Prepare ENV
      run: |
        TAG_NAME=$(./dist/get-tag-name.sh)
        version=${TAG_NAME/v/}
        timestamp=$(date '+%Y-%m-%d-%H-%M-%S')
        escaped_version=$(echo $version | sed 's/\./_/g')
        installer=TogglDesktop-$escaped_version-$timestamp.dmg
        installer_name=TogglDesktop-$escaped_version.dmg

        echo $version
        echo $installer
        echo $installer_name

        # Export env to all future steps
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_ENV
        echo "timestamp=$timestamp" >> $GITHUB_ENV
        echo "escaped_version=$escaped_version" >> $GITHUB_ENV
        echo "installer=$installer" >> $GITHUB_ENV
        echo "installer_name=$installer_name" >> $GITHUB_ENV
    - name: Setup Golang env
      if: github.event_name == 'release'
      uses: actions/setup-go@v1
      with:
        version: 1.13
    - name: Import signing key
      run: |
        # Create a new keychian and make it default
        security create-keychain -p password build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        
        # Mac Developer Certificate
        base64 -D <<< "${{ secrets.CERT_MACOS_DEVELOPER }}" > Bundle_cert_macos_developer.p12
        security import ./Bundle_cert_macos_developer.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERT_MACOS_DEVELOPER_PASSWORD }} -T /usr/bin/codesign

        # Mac Development Certificate
        base64 -D <<< "${{ secrets.CERT_MACOS_DEVELOPMENT }}" > Bundle_cert_macos_development.p12
        security import ./Bundle_cert_macos_development.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERT_MACOS_DEVELOPMENT_PASSWORD }} -T /usr/bin/codesign

        # Application Certificate
        base64 -D <<< "${{ secrets.CERT_MACOS_APPLICATION }}" > Bundle_cert_macos_distribution.p12
        security import ./Bundle_cert_macos_distribution.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERT_MACOS_APPLICATION_PASSWORD }} -T /usr/bin/codesign

        # Installer Certificate
        base64 -D <<< "${{ secrets.CERT_MACOS_INSTALLER }}" > Bundle_cert_macos_installer.p12
        security import ./Bundle_cert_macos_installer.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.CERT_MACOS_INSTALLER_PASSWORD }} -T /usr/bin/codesign

        # Unlock
        security unlock-keychain -p password ~/Library/Keychains/build.keychain
        security set-keychain-settings -lu
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k password ~/Library/Keychains/build.keychain
    
    - name: Cache cocoapods
      uses: actions/cache@v2
      with:
        path: src/ui/osx/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
    - name: Get cocoapods
      run: |
        bash ./dist/osx/build.sh cocoapods
    - name: Build the application
      run: |
        bash ./dist/osx/build.sh app
    - name: Insert version string
      run: |
        bash ./dist/osx/build.sh plist
    - name: Codesign
      run: |
        bash ./dist/osx/build.sh sign
    - name: Notarize
      # if: github.event_name == 'release'
      run: |
        export "APPLE_APPID_USER=${{ secrets.MACOS_APPID_USER }}"
        export "APPLE_APPID_PASSWORD=${{ secrets.MACOS_APPID_PASSWORD }}"
        bash ./dist/osx/build.sh notarize
    - name: Compose dmg
      run: |
        bash ./dist/osx/build.sh dmg
    - name: Upload artifacts to GitHub
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v2
      with:
        name: TogglDesktop.dmg
        path: "${{ env.installer }}"
    - name: Update Appcast
      if: github.event_name == 'release'
      run: |
        base64 -D <<< "${{ secrets.APPCAST_PRIVATE_PEM }}" > dsa_priv.pem
        bash ./dist/osx/build.sh appcast
    - name: Upload
      if: github.event_name == 'release'
      run: |
        ./dist/upload-github-release-asset.sh github_api_token=${{ secrets.GITHUB_TOKEN }} tag="$TAG_NAME" filename="$installer" renameto="$installer_name"
    - name: Update Release
      if: github.event_name == 'release'
      run: |
        bash ./dist/osx/build.sh update_release
